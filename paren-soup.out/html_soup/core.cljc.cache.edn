{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name html-soup.core, :imports nil, :requires {str clojure.string, clojure.string clojure.string, ts tag-soup.core, tag-soup.core tag-soup.core, gstring goog.string, goog.string goog.string}, :cljs.spec/speced-vars [], :uses {format goog.string}, :defs {line->segments {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :line 86, :column 7, :end-line 86, :end-column 21, :arglists (quote ([line tags-for-line escape?])), :doc "Splits a line into segments where tags are supposed to appear."}, :name html-soup.core/line->segments, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :end-column 21, :method-params ([line tags-for-line escape?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 3, :fn-var true, :arglists (quote ([line tags-for-line escape?])), :doc "Splits a line into segments where tags are supposed to appear."}, tag->hiccup {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :line 55, :column 7, :end-line 55, :end-column 18, :arglists (quote ([tag])), :doc "Returns a Hiccup-compatible data structure for the given tag description."}, :name html-soup.core/tag->hiccup, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :end-column 18, :method-params ([tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tag])), :doc "Returns a Hiccup-compatible data structure for the given tag description."}, line->html {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :line 107, :column 7, :end-line 107, :end-column 17, :arglists (quote ([line tags-for-line])), :doc "Returns the given line with html added."}, :name html-soup.core/line->html, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :end-column 17, :method-params ([line tags-for-line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([line tags-for-line])), :doc "Returns the given line with html added."}, code->hiccup {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :line 154, :column 7, :end-line 154, :end-column 19, :arglists (quote ([code])), :doc "Returns the code in the given string with Hiccup-compatible data structures added."}, :name html-soup.core/code->hiccup, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :end-column 19, :method-params ([code]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([code])), :doc "Returns the code in the given string with Hiccup-compatible data structures added."}, split-lines {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :line 6, :column 7, :end-line 6, :end-column 18, :arglists (quote ([s])), :doc "Splits the string into lines."}, :name html-soup.core/split-lines, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Splits the string into lines."}, code->html {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :line 130, :column 7, :end-line 130, :end-column 17, :arglists (quote ([code])), :doc "Returns the code in the given string with html added."}, :name html-soup.core/code->html, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :end-column 17, :method-params ([code]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([code])), :doc "Returns the code in the given string with html added."}, line->hiccup {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :line 114, :column 7, :end-line 114, :end-column 19, :arglists (quote ([line tags-for-line])), :doc "Returns the given line with Hiccup-compatible data structures added."}, :name html-soup.core/line->hiccup, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :end-column 19, :method-params ([line tags-for-line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists (quote ([line tags-for-line])), :doc "Returns the given line with Hiccup-compatible data structures added."}, tags-for-line->hiccup {:name html-soup.core/tags-for-line->hiccup, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :line 81, :column 1, :end-line 81, :end-column 27, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :line 81, :column 6, :end-line 81, :end-column 27}, :tag any}, tag->html {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :line 32, :column 7, :end-line 32, :end-column 16, :arglists (quote ([tag])), :doc "Returns an HTML string for the given tag description."}, :name html-soup.core/tag->html, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :end-column 16, :method-params ([tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tag])), :doc "Returns an HTML string for the given tag description."}, escape-html-str {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :line 11, :column 7, :end-line 11, :end-column 22, :arglists (quote ([s])), :doc "Escapes an HTML string"}, :name html-soup.core/escape-html-str, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Escapes an HTML string"}, tags-for-line->html {:name html-soup.core/tags-for-line->html, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :line 76, :column 1, :end-line 76, :end-column 25, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :line 76, :column 6, :end-line 76, :end-column 25}, :tag any}, structurize-hiccup {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :line 138, :column 7, :end-line 138, :end-column 25, :arglists (quote ([flat-hiccup] [flat-hiccup structured-hiccup])), :doc "Takes a flat list of Hiccup-compatible data and adds structure to it.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([flat-hiccup] [flat-hiccup structured-hiccup]), :arglists ([flat-hiccup] [flat-hiccup structured-hiccup]), :arglists-meta (nil nil)}}, :name html-soup.core/structurize-hiccup, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([flat-hiccup] [flat-hiccup structured-hiccup]), :arglists ([flat-hiccup] [flat-hiccup structured-hiccup]), :arglists-meta (nil nil)}, :method-params ([flat-hiccup] [flat-hiccup structured-hiccup]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 2, :fn-var true, :arglists ([flat-hiccup] [flat-hiccup structured-hiccup]), :doc "Takes a flat list of Hiccup-compatible data and adds structure to it."}, escape-html-char {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :line 21, :column 7, :end-line 21, :end-column 23, :arglists (quote ([s])), :doc "Escapes an HTML character"}, :name html-soup.core/escape-html-char, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :end-column 23, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Escapes an HTML character"}, parse-lines {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :line 121, :column 7, :end-line 121, :end-column 18, :arglists (quote ([parse-fn lines tags])), :doc "Returns the lines parsed with the given function."}, :name html-soup.core/parse-lines, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/html_soup/core.cljc", :end-column 18, :method-params ([parse-fn lines tags]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 3, :fn-var true, :arglists (quote ([parse-fn lines tags])), :doc "Returns the lines parsed with the given function."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:else :end? :value :delimiter? :column :data-message :begin? :class :error? :message :span}, :order [:delimiter? :error? :message :begin? :value :else :end? :span :class :data-message :column]}, :doc nil}