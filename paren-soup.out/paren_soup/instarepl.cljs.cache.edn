{:rename-macros {}, :renames {}, :externs {Error {}, Worker {prototype {onmessage {}, postMessage {}}}}, :use-macros {join clojure.string}, :excludes #{}, :name paren-soup.instarepl, :imports nil, :requires {goog.string goog.string, goog.string.format goog.string.format, hs html-soup.core, html-soup.core html-soup.core, clojure.string clojure.string, paren-soup.dom paren-soup.dom}, :cljs.spec/speced-vars [], :uses {join clojure.string, text-node? paren-soup.dom, format goog.string}, :defs {elems->locations {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/r3nb31/paren_soup/instarepl.cljs", :line 8, :column 7, :end-line 8, :end-column 23, :arglists (quote ([elems top-offset])), :doc "Returns the location of each elem."}, :name paren-soup.instarepl/elems->locations, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/r3nb31/paren_soup/instarepl.cljs", :end-column 23, :method-params ([elems top-offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elems top-offset])), :doc "Returns the location of each elem."}, results->html {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/r3nb31/paren_soup/instarepl.cljs", :line 19, :column 7, :end-line 19, :end-column 20, :arglists (quote ([results locations])), :doc "Returns HTML for the given eval results."}, :name paren-soup.instarepl/results->html, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/r3nb31/paren_soup/instarepl.cljs", :end-column 20, :method-params ([results locations]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([results locations])), :doc "Returns HTML for the given eval results."}, get-collections {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/r3nb31/paren_soup/instarepl.cljs", :line 39, :column 7, :end-line 39, :end-column 22, :arglists (quote ([element])), :doc "Returns collections from the given DOM node."}, :name paren-soup.instarepl/get-collections, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/r3nb31/paren_soup/instarepl.cljs", :end-column 22, :method-params ([element]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([element])), :doc "Returns collections from the given DOM node."}, collection->content {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/r3nb31/paren_soup/instarepl.cljs", :line 48, :column 7, :end-line 48, :end-column 26, :arglists (quote ([elem]))}, :name paren-soup.instarepl/collection->content, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/r3nb31/paren_soup/instarepl.cljs", :end-column 26, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem]))}, create-compiler-fn {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/r3nb31/paren_soup/instarepl.cljs", :line 57, :column 7, :end-line 57, :end-column 25, :arglists (quote ([]))}, :name paren-soup.instarepl/create-compiler-fn, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/r3nb31/paren_soup/instarepl.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:else :top :height}, :order [:top :height :else]}, :doc nil}