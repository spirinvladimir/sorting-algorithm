{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name mistakes-were-made.core, :imports nil, :requires {str clojure.string, clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses nil, :defs {can-redo? {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :line 76, :column 7, :end-line 76, :end-column 16, :arglists (quote ([edit-history])), :doc "Returns true if we can redo."}, :name mistakes-were-made.core/can-redo?, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :end-column 16, :method-params ([edit-history]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([edit-history])), :doc "Returns true if we can redo."}, get-current-state {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :line 39, :column 7, :end-line 39, :end-column 24, :arglists (quote ([edit-history])), :doc "Returns the current state from edit-history, or nil if there is none."}, :name mistakes-were-made.core/get-current-state, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :end-column 24, :method-params ([edit-history]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([edit-history])), :doc "Returns the current state from edit-history, or nil if there is none."}, undo! {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :line 57, :column 7, :end-line 57, :end-column 12, :arglists (quote ([edit-history])), :doc "Changes the current state and returns the previous state from edit-history, or nil if there is none."}, :name mistakes-were-made.core/undo!, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :end-column 12, :method-params ([edit-history]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([edit-history])), :doc "Changes the current state and returns the previous state from edit-history, or nil if there is none."}, redo! {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :line 64, :column 7, :end-line 64, :end-column 12, :arglists (quote ([edit-history])), :doc "Changes the current state and returns the next state from edit-history, or nil if there is none."}, :name mistakes-were-made.core/redo!, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :end-column 12, :method-params ([edit-history]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([edit-history])), :doc "Changes the current state and returns the next state from edit-history, or nil if there is none."}, can-undo? {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :line 71, :column 7, :end-line 71, :end-column 16, :arglists (quote ([edit-history])), :doc "Returns true if we can undo."}, :name mistakes-were-made.core/can-undo?, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :end-column 16, :method-params ([edit-history]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([edit-history])), :doc "Returns true if we can undo."}, get-next-state {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :line 51, :column 7, :end-line 51, :end-column 21, :arglists (quote ([edit-history])), :doc "Returns the next state from edit-history, or nil if there is none."}, :name mistakes-were-made.core/get-next-state, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :end-column 21, :method-params ([edit-history]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([edit-history])), :doc "Returns the next state from edit-history, or nil if there is none."}, update-cursor-position! {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :line 32, :column 7, :end-line 32, :end-column 30, :arglists (quote ([edit-history cursor-position])), :doc "Updates only the cursor position."}, :name mistakes-were-made.core/update-cursor-position!, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :end-column 30, :method-params ([edit-history cursor-position]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([edit-history cursor-position])), :doc "Updates only the cursor position."}, update-edit-history! {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :line 7, :column 7, :end-line 7, :end-column 27, :arglists (quote ([edit-history state])), :doc "Updates the edit history atom."}, :name mistakes-were-made.core/update-edit-history!, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :end-column 27, :method-params ([edit-history state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([edit-history state])), :doc "Updates the edit history atom."}, create-edit-history {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :line 4, :column 7, :end-line 4, :end-column 26, :arglists (quote ([]))}, :name mistakes-were-made.core/create-edit-history, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-previous-state {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :line 45, :column 7, :end-line 45, :end-column 25, :arglists (quote ([edit-history])), :doc "Returns the previous state from edit-history, or nil if there is none."}, :name mistakes-were-made.core/get-previous-state, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/mistakes_were_made/core.cljc", :end-column 25, :method-params ([edit-history]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([edit-history])), :doc "Returns the previous state from edit-history, or nil if there is none."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:current-state :original-cursor-position :limit :cursor-position :states :text}, :order [:current-state :states :limit :original-cursor-position :cursor-position :text]}, :doc nil}