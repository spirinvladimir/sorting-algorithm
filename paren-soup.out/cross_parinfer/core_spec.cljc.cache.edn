{:rename-macros {}, :renames {}, :use-macros {fdef cljs.spec.alpha}, :excludes #{}, :name cross-parinfer.core-spec, :imports nil, :requires {c cross-parinfer.core, cross-parinfer.core cross-parinfer.core, tag-soup.core-spec tag-soup.core-spec, s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, clojure.spec.alpha cljs.spec.alpha}, :cljs.spec/speced-vars [], :uses {}, :cljs.spec/registry-ref [[:cross-parinfer.core-spec/state (cljs.spec.alpha/keys :req-un [:cross-parinfer.core-spec/cursor-position :cross-parinfer.core-spec/text] :opt-un [:cross-parinfer.core-spec/indent-type])] [:cross-parinfer.core-spec/x cljs.core/integer?] [:cross-parinfer.core-spec/text cljs.core/string?] [:cross-parinfer.core-spec/cursor-position (cljs.spec.alpha/tuple cljs.core/integer? cljs.core/integer?)] [:cross-parinfer.core-spec/indent-type #{:return :forward :normal :back}] [:cross-parinfer.core-spec/result (cljs.spec.alpha/keys :req-un [:cross-parinfer.core-spec/x :cross-parinfer.core-spec/text])]], :require-macros {s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, clojure.spec.alpha cljs.spec.alpha}, :cljs.analyzer/constants {:seen #{:args :req-un :opt-un cljs.core/boolean? :three-args :ret :gfn cross-parinfer.core/indent-mode cljs.core/keyword? :pred-exprs :keys-pred cljs.spec.alpha/alt :cross-parinfer.core-spec/state :opt-keys :cross-parinfer.core-spec/x :cursor-position cross-parinfer.core/mode cljs.spec.alpha/coll-of cljs.spec.alpha/cat :cljs.spec.alpha/kind-form :return :line-num cljs.core/string? :forward :req-specs cross-parinfer.core/add-parinfer :indent-type :lines cljs.spec.alpha/fspec string? cljs.spec.alpha/tuple :cross-parinfer.core-spec/text :state cljs.core/contains? cljs.core/map? :cljs.spec.alpha/cpred :normal cross-parinfer.core/update-indent % cljs.spec.alpha/keys :cross-parinfer.core-spec/cursor-position :req cross-parinfer.core/paren-mode cljs.core/integer? cross-parinfer.core/split-lines :mode-type :str :line cross-parinfer.core/add-indent :col :back :req-keys cljs.core/fn :opt-specs integer? :position :pred-forms cross-parinfer.core/position->row-col cross-parinfer.core/indent-count :cross-parinfer.core-spec/indent-type :preview-cursor-scope? :x :cross-parinfer.core-spec/result cross-parinfer.core/row-col->position :cljs.spec.alpha/conform-all :row :cljs.spec.alpha/describe :opt :text :diff :four-args}, :order [:cross-parinfer.core-spec/x cljs.core/integer? :cross-parinfer.core-spec/text cljs.core/string? :cross-parinfer.core-spec/result cljs.spec.alpha/keys :req-un :opt-un :gfn :pred-exprs :keys-pred :opt-keys :req-specs :req :req-keys :opt-specs :pred-forms :opt :x :text cljs.core/fn % cljs.core/map? cljs.core/contains? :cross-parinfer.core-spec/cursor-position cljs.spec.alpha/tuple :cross-parinfer.core-spec/indent-type :return :forward :normal :back :cross-parinfer.core-spec/state :cursor-position :indent-type cross-parinfer.core/paren-mode cljs.spec.alpha/fspec :args cljs.spec.alpha/cat :line :ret cross-parinfer.core/indent-mode cljs.spec.alpha/alt :three-args :four-args :preview-cursor-scope? cljs.core/boolean? cross-parinfer.core/mode :mode-type cljs.core/keyword? cross-parinfer.core/split-lines :str cljs.spec.alpha/coll-of string? :cljs.spec.alpha/kind-form :cljs.spec.alpha/cpred :cljs.spec.alpha/conform-all :cljs.spec.alpha/describe cross-parinfer.core/position->row-col :position integer? cross-parinfer.core/row-col->position :row :col cross-parinfer.core/add-parinfer :state cross-parinfer.core/indent-count cross-parinfer.core/update-indent :diff :lines :line-num cross-parinfer.core/add-indent]}, :doc nil}