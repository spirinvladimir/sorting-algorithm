{:rename-macros {}, :renames {}, :externs {parinfer {parenMode {}, indentMode {}}, Error {}}, :use-macros {}, :excludes #{}, :name cross-parinfer.core, :imports nil, :requires {str clojure.string, clojure.string clojure.string, ts tag-soup.core, tag-soup.core tag-soup.core, cljsjs.parinfer cljsjs.parinfer}, :cljs.spec/speced-vars [], :uses nil, :defs {paren-mode {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :line 7, :column 7, :end-line 7, :end-column 17, :arglists (quote ([text x line])), :doc "Runs paren mode on the given text."}, :name cross-parinfer.core/paren-mode, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :end-column 17, :method-params ([text x line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 3, :fn-var true, :arglists (quote ([text x line])), :doc "Runs paren mode on the given text."}, add-indent {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :line 105, :column 7, :end-line 105, :end-column 17, :arglists (quote ([state])), :doc "Adds indent to the state."}, :name cross-parinfer.core/add-indent, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Adds indent to the state."}, indent-count {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :line 91, :column 7, :end-line 91, :end-column 19, :arglists (quote ([line]))}, :name cross-parinfer.core/indent-count, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :end-column 19, :method-params ([line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line]))}, row-col->position {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :line 67, :column 7, :end-line 67, :end-column 24, :arglists (quote ([text row col])), :doc "Converts a row and column number to a position."}, :name cross-parinfer.core/row-col->position, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :end-column 24, :method-params ([text row col]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 3, :fn-var true, :arglists (quote ([text row col])), :doc "Converts a row and column number to a position."}, position->row-col {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :line 56, :column 7, :end-line 56, :end-column 24, :arglists (quote ([text position])), :doc "Converts a position to a row and column number."}, :name cross-parinfer.core/position->row-col, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :end-column 24, :method-params ([text position]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text position])), :doc "Converts a position to a row and column number."}, split-lines {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :line 51, :column 7, :end-line 51, :end-column 18, :arglists (quote ([s])), :doc "Splits the string into lines."}, :name cross-parinfer.core/split-lines, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Splits the string into lines."}, update-indent {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :line 94, :column 7, :end-line 94, :end-column 20, :arglists (quote ([diff lines line-num]))}, :name cross-parinfer.core/update-indent, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :end-column 20, :method-params ([diff lines line-num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 3, :fn-var true, :arglists (quote ([diff lines line-num]))}, mode {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :line 40, :column 7, :end-line 40, :end-column 11, :arglists (quote ([mode-type text x line])), :doc "Runs the specified mode, which can be :paren, :indent, or :both."}, :name cross-parinfer.core/mode, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :end-column 11, :method-params ([mode-type text x line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 4, :fn-var true, :arglists (quote ([mode-type text x line])), :doc "Runs the specified mode, which can be :paren, :indent, or :both."}, indent-mode {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :line 21, :column 7, :end-line 21, :end-column 18, :arglists (quote ([text x line] [text x line preview-cursor-scope?])), :doc "Runs indent mode on the given text.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([text x line] [text x line preview-cursor-scope?]), :arglists ([text x line] [text x line preview-cursor-scope?]), :arglists-meta (nil nil)}}, :name cross-parinfer.core/indent-mode, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([text x line] [text x line preview-cursor-scope?]), :arglists ([text x line] [text x line preview-cursor-scope?]), :arglists-meta (nil nil)}, :method-params ([text x line] [text x line preview-cursor-scope?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 4, :fn-var true, :arglists ([text x line] [text x line preview-cursor-scope?]), :doc "Runs indent mode on the given text."}, add-parinfer {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :line 79, :column 7, :end-line 79, :end-column 19, :arglists (quote ([mode-type state])), :doc "Adds parinfer to the state."}, :name cross-parinfer.core/add-parinfer, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/cross_parinfer/core.cljc", :end-column 19, :method-params ([mode-type state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mode-type state])), :doc "Adds parinfer to the state."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:cursor-position :indent-type :normal :x :text}, :order [:x :text :cursor-position :indent-type :normal]}, :doc nil}