{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name tag-soup.core, :imports nil, :requires {str clojure.string, clojure.string clojure.string, r oakcljs.tools.reader, oakcljs.tools.reader oakcljs.tools.reader, oakcljs.tools.reader.reader-types oakcljs.tools.reader.reader-types}, :cljs.spec/speced-vars [], :uses {indexing-push-back-reader oakcljs.tools.reader.reader-types, indexing-reader? oakcljs.tools.reader.reader-types, *wrap-value-and-add-metadata?* oakcljs.tools.reader}, :defs {special-indent {:meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :line 18, :column 14, :end-line 18, :end-column 28, :const true}, :name tag-soup.core/special-indent, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :end-column 28, :const-expr {:op :set, :env {:context :expr}, :form #{(quote and) (quote >=) (quote >) (quote /) (quote ->>) (quote <=) (quote =) (quote cond->>) (quote +) (quote ==) (quote *) (quote some->>) (quote some->) (quote not=) (quote cond->) (quote <) (quote -) (quote ->) (quote as->) (quote or)}, :items [{:op :constant, :env {:context :expr}, :form and, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form >=, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form >, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form /, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form ->>, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form <=, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form =, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form cond->>, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form +, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form ==, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form *, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form some->>, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form some->, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form not=, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form cond->, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form <, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form -, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form ->, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form as->, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form or, :tag cljs.core/Symbol}], :children [{:op :constant, :env {:context :expr}, :form and, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form >=, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form >, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form /, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form ->>, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form <=, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form =, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form cond->>, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form +, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form ==, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form *, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form some->>, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form some->, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form not=, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form cond->, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form <, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form -, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form ->, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form as->, :tag cljs.core/Symbol} {:op :constant, :env {:context :expr}, :form or, :tag cljs.core/Symbol}], :tag cljs.core/ISet}, :column 1, :const true, :line 18, :end-line 18, :tag cljs.core/ISet}, code->tags {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :line 110, :column 7, :end-line 110, :end-column 17, :arglists (quote ([text])), :doc "Returns the tags for the given string containing code."}, :name tag-soup.core/code->tags, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :end-column 17, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text])), :doc "Returns the tags for the given string containing code."}, indent-for-line {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :line 129, :column 7, :end-line 129, :end-column 22, :arglists (quote ([tags line])), :doc "Returns the number of spaces the given line should be indented."}, :name tag-soup.core/indent-for-line, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :end-column 22, :method-params ([tags line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tags line])), :doc "Returns the number of spaces the given line should be indented."}, adjust-indent {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :line 33, :column 7, :end-line 33, :end-column 20, :arglists (quote ([token])), :doc "Returns how much the indent should be adjusted for the given token."}, :name tag-soup.core/adjust-indent, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :end-column 20, :method-params ([token]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([token])), :doc "Returns how much the indent should be adjusted for the given token."}, read-safe {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :line 10, :column 7, :end-line 10, :end-column 16, :arglists (quote ([reader])), :doc "Returns either a form or an exception object, or nil if EOF is reached."}, :name tag-soup.core/read-safe, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :end-column 16, :method-params ([reader]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reader])), :doc "Returns either a form or an exception object, or nil if EOF is reached."}, unwrap-value {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :line 28, :column 7, :end-line 28, :end-column 19, :arglists (quote ([value]))}, :name tag-soup.core/unwrap-value, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :end-column 19, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, get-tags-before-line {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :line 119, :column 7, :end-line 119, :end-column 27, :arglists (quote ([tags line])), :doc "Returns the tags before the given line."}, :name tag-soup.core/get-tags-before-line, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :end-column 27, :method-params ([tags line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tags line])), :doc "Returns the tags before the given line."}, forward-indent-for-line {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :line 153, :column 7, :end-line 153, :end-column 30, :arglists (quote ([tags line current-indent])), :doc "Returns the number of spaces the given line should be indented forward."}, :name tag-soup.core/forward-indent-for-line, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :end-column 30, :method-params ([tags line current-indent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tags line current-indent])), :doc "Returns the number of spaces the given line should be indented forward."}, tag-map {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :line 53, :column 7, :end-line 53, :end-column 14, :arglists (quote ([token results-map parent-indent])), :doc "Returns a transient map containing the tags, organized by line number."}, :name tag-soup.core/tag-map, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :end-column 14, :method-params ([token results-map parent-indent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 3, :fn-var true, :arglists (quote ([token results-map parent-indent])), :doc "Returns a transient map containing the tags, organized by line number."}, back-indent-for-line {:protocol-inline nil, :meta {:file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :line 137, :column 7, :end-line 137, :end-column 27, :arglists (quote ([tags line current-indent])), :doc "Returns the number of spaces the given line should be indented back."}, :name tag-soup.core/back-indent-for-line, :variadic false, :file "/Users/a/.boot/cache/tmp/Users/a/p/paren-soup/2lw/-msrsqg/public/paren-soup.out/tag_soup/core.cljc", :end-column 27, :method-params ([tags line current-indent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tags line current-indent])), :doc "Returns the number of spaces the given line should be indented back."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{cond->> :indent = < :else :end? <= * :value -> :end-column :wrapped? :delimiter? :read-cond not= as-> > :preserve some->> :column - or cond-> :line :begin? / >= :end-line some-> :skip-indent? :top-level? :error? + :eof :next-line-indent == and :message ->>}, :order [:else :read-cond :eof :preserve and >= > / ->> <= = cond->> + == * some->> some-> not= cond-> < - -> as-> or :wrapped? :line :column :error? :message :end-line :end-column :begin? :value :indent :top-level? :skip-indent? :delimiter? :end? :next-line-indent]}, :doc nil}